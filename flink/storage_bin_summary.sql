-- Create final summary table structure
CREATE TABLE `sbx-uat.wms.public.storage_bin_summary`
(
    wh_id BIGINT,
    bin_code STRING,
    bin_description STRING,
    multi_sku BOOLEAN,
    multi_batch BOOLEAN,
    picking_position INT,
    putaway_position INT,
    `rank` INT,
    aisle STRING,
    bay STRING,
    `level` STRING,
    `position` STRING,
    `depth` STRING,
    max_sku_count INT,
    max_sku_batch_count INT,
    bin_type_code STRING,
    bin_type_description STRING,
    max_volume_in_cc FLOAT,
    max_weight_in_kg FLOAT,
    pallet_capacity INT,
    storage_hu_type STRING,
    auxiliary_bin BOOLEAN,
    hu_multi_sku BOOLEAN,
    hu_multi_batch BOOLEAN,
    use_derived_pallet_best_fit BOOLEAN,
    zone_code STRING,
    zone_description STRING,
    zone_face STRING,
    peripheral BOOLEAN,
    surveillance_config STRING,
    area_code STRING,
    sa_description STRING,
    area_type STRING,
    rolling_days INT,
    x1 FLOAT,
    x2 FLOAT,
    y1 FLOAT,
    y2 FLOAT,
    quality STRING,
    sloc STRING,
    sloc_description STRING,
    client_quality STRING,
    inventory_visible BOOLEAN,
    erp_to_wms BOOLEAN,
    sd_code STRING,
    `usage` STRING,
    multi_trip BOOLEAN,
    sd_description STRING,
    max_queue BIGINT,
    allow_inbound BOOLEAN,
    allow_outbound BOOLEAN,
    allow_returns BOOLEAN,
    incompatible_vehicle_types STRING,
    incompatible_load_types STRING,
    dockdoor_x_coordinate FLOAT,
    dockdoor_y_coordinate FLOAT,
    sb_status STRING,
    sbt_active BOOLEAN,
    bin_mapping STRING,
    PRIMARY KEY (wh_id, bin_code, quality, sd_code) NOT ENFORCED
) WITH (
    'connector' = 'confluent',
    'value.format' = 'avro-registry'
);


-- Continuously populate the summary table
INSERT INTO `sbx-uat.wms.public.storage_bin_summary`
SELECT
    sb.`whId` AS wh_id,
    sb.code AS bin_code,
    sb.description AS bin_description,
    sb.`multiSku` AS multi_sku,
    sb.`multiBatch` AS multi_batch,
    sb.`pickingPosition` AS picking_position,
    sb.`putawayPosition` AS putaway_position,
    sb.`rank`,
    sb.aisle,
    sb.bay,
    sb.`level`,
    sb.`position`,
    sb.`depth`,
    sb.`maxSkuCount` AS max_sku_count,
    sb.`maxSkuBatchCount` AS max_sku_batch_count,
    sbt.code AS bin_type_code,
    sbt.description AS bin_type_description,
    sbt.`maxVolumeInCC` AS max_volume_in_cc,
    sbt.`maxWeightInKG` AS max_weight_in_kg,
    sbt.`palletCapacity` AS pallet_capacity,
    sbt.`storageHUType` AS storage_hu_type,
    sbt.`auxiliaryBin` AS auxiliary_bin,
    sbt.`huMultiSku` AS hu_multi_sku,
    sbt.`huMultiBatch` AS hu_multi_batch,
    sbt.`useDerivedPalletBestFit` AS use_derived_pallet_best_fit,
    sz.code AS zone_code,
    sz.description AS zone_description,
    sz.face AS zone_face,
    sz.peripheral,
    sz.`surveillanceConfig` AS surveillance_config,
    sa.code AS area_code,
    sa.description AS sa_description,
    sa.`type` AS area_type,
    sa.`rollingDays` AS rolling_days,
    ss.x1,
    ss.x2,
    ss.y1,
    ss.y2,
    sac.quality,
    sac.sloc,
    sac.`slocDescription` AS sloc_description,
    sac.`clientQuality` AS client_quality,
    sac.`inventoryVisible` AS inventory_visible,
    sac.`erpToWMS` AS erp_to_wms,
    sd.code AS sd_code,
    sbd.`usage`,
    sbd.`multiTrip` AS multi_trip,
    sd.description AS sd_description,
    sd.`maxQueue` AS max_queue,
    sd.`allowInbound` AS allow_inbound,
    sd.`allowOutbound` AS allow_outbound,
    sd.`allowReturns` AS allow_returns,
    sd.`incompatibleVehicleTypes` AS incompatible_vehicle_types,
    sd.`incompatibleLoadTypes` AS incompatible_load_types,
    sdp.x AS dockdoor_x_coordinate,
    sdp.y AS dockdoor_y_coordinate,
    sb.status AS sb_status,
    sbt.active AS sbt_active,
    CASE WHEN sbfm.active = 'True' THEN 'FIXED' ELSE 'DYNAMIC' END AS bin_mapping
FROM `sbx-uat.wms.public.storage_bin` AS sb
LEFT JOIN `sbx-uat.wms.public.storage_bin_fixed_mapping` sbfm ON sb.id = sbfm.`binId`
LEFT JOIN `sbx-uat.wms.public.storage_bin_type` sbt ON sb.`binTypeId` = sbt.id
LEFT JOIN `sbx-uat.wms.public.storage_zone` sz ON sb.`zoneId` = sz.id
LEFT JOIN `sbx-uat.wms.public.storage_area` sa ON sz.`areaId` = sa.id
LEFT JOIN `sbx-uat.wms.public.storage_position` ss ON ss.`storageId` = sb.id
LEFT JOIN `sbx-uat.wms.public.storage_area_sloc` sac ON sa.`whId` = sac.`whId` AND sa.`code` = sac.`areaCode`
LEFT JOIN `sbx-uat.wms.public.storage_bin_dockdoor` sbd ON sb.id = sbd.`binId`
LEFT JOIN `sbx-uat.wms.public.storage_dockdoor` sd ON sbd.`dockdoorId` = sd.id
LEFT JOIN `sbx-uat.wms.public.storage_dockdoor_position` sdp ON sd.`id` = sdp.`dockdoorId`;