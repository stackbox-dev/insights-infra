-- Create final summary table structure
CREATE TABLE `sbx-uat.wms.public.storage_bin_summary`
(
    whId BIGINT,
    bin_code STRING,
    bin_description STRING,
    multiSku BOOLEAN,
    multiBatch BOOLEAN,
    pickingPosition INT,
    putawayPosition INT,
    `rank` INT,
    aisle STRING,
    bay STRING,
    `level` STRING,
    `position` STRING,
    `depth` STRING,
    maxSkuCount INT,
    maxSkuBatchCount INT,
    bin_type_code STRING,
    bintype_description STRING,
    maxVolumeInCC FLOAT,
    maxWeightInKG FLOAT,
    palletCapacity INT,
    storageHUType STRING,
    auxiliaryBin BOOLEAN,
    huMultiSku BOOLEAN,
    huMultiBatch BOOLEAN,
    useDerivedPalletBestFit BOOLEAN,
    zone_code STRING,
    zone_description STRING,
    zone_face STRING,
    peripheral BOOLEAN,
    surveillanceConfig STRING,
    area_code STRING,
    sa_description STRING,
    area_type STRING,
    rollingDays INT,
    x1 FLOAT,
    x2 FLOAT,
    y1 FLOAT,
    y2 FLOAT,
    quality STRING,
    sloc STRING,
    slocDescription STRING,
    clientQuality STRING,
    inventoryVisible BOOLEAN,
    erpToWMS BOOLEAN,
    sd_code STRING,
    `usage` STRING,
    multiTrip BOOLEAN,
    sd_description STRING,
    maxQueue BIGINT,
    allowInbound BOOLEAN,
    allowOutbound BOOLEAN,
    allowReturns BOOLEAN,
    incompatibleVehicleTypes STRING,
    incompatibleLoadTypes STRING,
    dockdoor_x_coordinate FLOAT,
    dockdoor_y_coordinate FLOAT,
    sb_status STRING,
    sbt_active BOOLEAN,
    bin_mapping STRING
    PRIMARY KEY (whId, bin_code, quality, sd_code) NOT ENFORCED
) WITH (
    'connector' = 'confluent',
    'value.format' = 'avro-registry'
);



-- Continuously populate the summary table
INSERT INTO `sbx-uat.wms.public.storage_bin_summary`
SELECT
    sb.`whId` AS `whId`,
    sb.code AS bin_code,
    sb.description AS bin_description,
    sb.`multiSku`,
    sb.`multiBatch`,
    sb.`pickingPosition`,
    sb.`putawayPosition`,
    sb.`rank`,
    sb.aisle,
    sb.bay,
    sb.`level`,
    sb.`position`,
    sb.`depth`,
    sb.`maxSkuCount`,
    sb.`maxSkuBatchCount`,
    sbt.code AS bin_type_code,
    sbt.description AS bintype_description,
    sbt.`maxVolumeInCC`,
    sbt.`maxWeightInKG`,
    sbt.`palletCapacity`,
    sbt.`storageHUType`,
    sbt.`auxiliaryBin`,
    sbt.`huMultiSku`,
    sbt.`huMultiBatch`,
    sbt.`useDerivedPalletBestFit`,
    sz.code AS zone_code,
    sz.description AS zone_description,
    sz.face AS zone_face,
    sz.peripheral,
    sz.`surveillanceConfig`,
    sa.code AS area_code,
    sa.description AS sa_description,
    sa.`type` AS area_type,
    sa.`rollingDays`,
    ss.x1,
    ss.x2,
    ss.y1,
    ss.y2,
    sac.quality,
    sac.sloc,
    sac.`slocDescription`,
    sac.`clientQuality`,
    sac.`inventoryVisible`,
    sac.`erpToWMS`,
    sd.code AS sd_code,
    sbd.`usage`,
    sbd.`multiTrip`,
    sd.description AS sd_description,
    sd.`maxQueue`,
    sd.`allowInbound`,
    sd.`allowOutbound`,
    sd.`allowReturns`,
    sd.`incompatibleVehicleTypes`,
    sd.`incompatibleLoadTypes`,
    sdp.x AS dockdoor_x_coordinate,
    sdp.y AS dockdoor_y_coordinate,
    sb.status AS sb_status,
    sbt.active AS sbt_active,
case when sbfm.active = 'True' then 'FIXED' else 'DYNAMIC' end as bin_mapping
FROM `sbx-uat.wms.public.storage_bin` AS sb
LEFT JOIN `sbx-uat.wms.public.storage_bin_fixed_mapping` sbfm on sb.id=sbfm.`binId`
LEFT JOIN `sbx-uat.wms.public.storage_bin_type` sbt ON sb.`binTypeId` = sbt.id
LEFT JOIN `sbx-uat.wms.public.storage_zone` sz ON sb.`zoneId` = sz.id
LEFT JOIN `sbx-uat.wms.public.storage_area` sa ON sz.`areaId` = sa.id
LEFT JOIN `sbx-uat.wms.public.storage_position` ss ON ss.`storageId` = sb.id
LEFT JOIN `sbx-uat.wms.public.storage_area_sloc` sac ON sa.`whId` = sac.`whId` AND sa.`code` = sac.`areaCode`
LEFT JOIN `sbx-uat.wms.public.storage_bin_dockdoor` sbd ON sb.id = sbd.`binId`
LEFT JOIN `sbx-uat.wms.public.storage_dockdoor` sd ON sbd.`dockdoorId` = sd.id
LEFT JOIN `sbx-uat.wms.public.storage_dockdoor_position` sdp ON sd.`id` = sdp.`dockdoorId`;
