apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zeppelin
  namespace: flink-studio
  labels:
    app.kubernetes.io/name: zeppelin
    app.kubernetes.io/component: web-ui
spec:
  serviceName: zeppelin
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zeppelin
      app.kubernetes.io/component: web-ui
  template:
    metadata:
      labels:
        app.kubernetes.io/name: zeppelin
        app.kubernetes.io/component: web-ui
    spec:
      serviceAccountName: flink
      securityContext:
        fsGroup: 1000
      initContainers:
        - name: setup-zeppelin
          image: ubuntu:22.04
          command:
            - bash
            - -c
            - |
              set -e
              echo "Setting up Zeppelin environment..."
              
              # Install required tools
              apt-get update && apt-get install -y curl wget
              
              # Download and setup Flink
              echo "Downloading Flink for Zeppelin..."
              cd /tmp
              curl -L https://archive.apache.org/dist/flink/flink-2.0.0/flink-2.0.0-bin-scala_2.12.tgz -o flink.tgz
              tar -xzf flink.tgz
              mv flink-2.0.0/* /opt/flink/
              rm -rf flink-2.0.0 flink.tgz
              
              # Flink 2.0 specific setup for Zeppelin compatibility
              echo "Setting up Flink 2.0 for Zeppelin compatibility..."
              # Ensure SQL client jar is in lib (required for Flink 1.16+)
              if [ -f "/opt/flink/opt/flink-sql-client-2.0.0.jar" ]; then
                mv /opt/flink/opt/flink-sql-client-2.0.0.jar /opt/flink/lib/
                echo "Moved SQL client jar to lib directory"
              fi
              
              # Ensure table planner is correctly positioned for Flink 2.0
              if [ -f "/opt/flink/opt/flink-table-planner-2.0.0.jar" ]; then
                mv /opt/flink/opt/flink-table-planner-2.0.0.jar /opt/flink/lib/
                echo "Moved table planner to lib directory"
              fi
              
              # Set up Zeppelin data directories
              echo "Setting up Zeppelin data directories..."
              mkdir -p /opt/zeppelin/notebook /opt/zeppelin/logs /opt/zeppelin/local-repo /opt/zeppelin/conf
              
              # Set proper permissions
              echo "Setting permissions..."
              chown -R 1000:1000 /opt/flink /opt/zeppelin/notebook /opt/zeppelin/logs /opt/zeppelin/local-repo
              chmod -R 755 /opt/flink /opt/zeppelin/notebook /opt/zeppelin/logs /opt/zeppelin/local-repo
              
              # Test Flink cluster connectivity
              echo "Testing connection to Flink Session cluster..."
              max_attempts=15
              attempt=1
              while [ $attempt -le $max_attempts ]; do
                if curl -s http://flink-session-cluster:80/ > /dev/null 2>&1; then
                  echo "Successfully connected to Flink Session cluster"
                  break
                fi
                echo "Attempt $attempt/$max_attempts: Waiting for Flink Session cluster..."
                sleep 2
                attempt=$((attempt + 1))
              done
              
              if [ $attempt -gt $max_attempts ]; then
                echo "Warning: Could not connect to Flink Session cluster after $max_attempts attempts"
              fi
              
              echo "Zeppelin setup completed successfully!"
              echo "FLINK_HOME contents:"
              ls -la /opt/flink/
              echo "Zeppelin directories:"
              ls -la /opt/zeppelin/
          volumeMounts:
            - name: flink-home
              mountPath: /opt/flink
            - name: zeppelin-data
              mountPath: /opt/zeppelin/notebook
              subPath: notebook
            - name: zeppelin-data
              mountPath: /opt/zeppelin/logs  
              subPath: logs
            - name: zeppelin-data
              mountPath: /opt/zeppelin/local-repo
              subPath: local-repo
      containers:
        - name: zeppelin
          image: apache/zeppelin:0.12.0
          ports:
            - containerPort: 8080
              name: http
          env:
            - name: ZEPPELIN_CONF_DIR
              value: "/opt/zeppelin/conf"
            - name: ZEPPELIN_NOTEBOOK_DIR
              value: "/opt/zeppelin/notebook"
            - name: ZEPPELIN_LOG_DIR
              value: "/opt/zeppelin/logs"
            - name: ZEPPELIN_MEM
              value: "-Xmx2g -Xms1g"
            - name: ZEPPELIN_JAVA_OPTS
              value: "-Dfile.encoding=UTF-8"
            # Flink configuration
            - name: FLINK_HOME
              value: "/opt/flink"
            - name: FLINK_CONF_DIR
              value: "/opt/flink/conf"
            # Flink Session cluster connectivity
            - name: FLINK_SESSION_CLUSTER_ENDPOINT
              value: "http://flink-session-cluster:80"
            # GCP Configuration for Flink compatibility
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /opt/flink/gcp/service-account.json
            - name: GOOGLE_CLOUD_PROJECT
              value: sbx-stag
          volumeMounts:
            - name: zeppelin-config
              mountPath: /opt/zeppelin/conf/zeppelin-site.xml
              subPath: zeppelin-site.xml
              readOnly: true
            - name: zeppelin-config
              mountPath: /opt/zeppelin/conf/interpreter.json
              subPath: interpreter.json
              readOnly: true
            - name: zeppelin-data
              mountPath: /opt/zeppelin/notebook
              subPath: notebook
            - name: zeppelin-data
              mountPath: /opt/zeppelin/logs
              subPath: logs
            - name: zeppelin-data
              mountPath: /opt/zeppelin/local-repo
              subPath: local-repo
            - name: flink-home
              mountPath: /opt/flink
            - name: gcp-service-account
              mountPath: /opt/flink/gcp
              readOnly: true
          resources:
            requests:
              memory: "2Gi"
              cpu: "1"
            limits:
              memory: "4Gi"
              cpu: "2"
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: zeppelin-config
          configMap:
            name: zeppelin-config
            defaultMode: 0755
        - name: flink-home
          emptyDir: {}
        - name: gcp-service-account
          secret:
            secretName: gcp-service-account-key
  volumeClaimTemplates:
  - metadata:
      name: zeppelin-data
      labels:
        app.kubernetes.io/name: zeppelin
        app.kubernetes.io/component: storage
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
      storageClassName: standard-rwo
---
apiVersion: v1
kind: Service
metadata:
  name: zeppelin
  namespace: flink-studio
  labels:
    app.kubernetes.io/name: zeppelin
    app.kubernetes.io/component: web-ui
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: zeppelin
    app.kubernetes.io/component: web-ui
---
# Regular service for external access
apiVersion: v1
kind: Service
metadata:
  name: zeppelin-service
  namespace: flink-studio
  labels:
    app.kubernetes.io/name: zeppelin
    app.kubernetes.io/component: web-ui-external
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: zeppelin
    app.kubernetes.io/component: web-ui
---
# Optional: Ingress for external access
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: zeppelin-ingress
#   namespace: flink-studio
#   labels:
#     app.kubernetes.io/name: zeppelin
#     app.kubernetes.io/component: ingress
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /
#     cert-manager.io/cluster-issuer: "letsencrypt-prod"
# spec:
#   ingressClassName: nginx
#   tls:
#   - hosts:
#     - zeppelin.flink-studio.local
#     secretName: zeppelin-tls
#   rules:
#   - host: zeppelin.flink-studio.local
#     http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: zeppelin
#             port:
#               number: 8080
