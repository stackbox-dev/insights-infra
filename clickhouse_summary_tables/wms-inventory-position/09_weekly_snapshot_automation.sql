-- Automated Weekly Snapshot Generation
-- Note: ClickHouse doesn't support REFRESH syntax in the way originally written
-- Instead, use a regular materialized view that processes new data as it arrives
-- For scheduled weekly snapshots, use an external scheduler (cron, Airflow, etc.)

-- Drop existing view if exists
DROP VIEW IF EXISTS wms_inventory_weekly_snapshot_auto;

-- Create a regular view that can be called weekly by an external scheduler
-- Call this with: INSERT INTO wms_inventory_weekly_snapshot SELECT * FROM wms_inventory_weekly_snapshot_auto;
CREATE VIEW wms_inventory_weekly_snapshot_auto
AS
WITH current_week AS (
    SELECT toStartOfWeek(now()) as snapshot_timestamp
)
SELECT 
    current_week.snapshot_timestamp as snapshot_timestamp,
    'weekly' as snapshot_type,
    wh_id,
    hu_code,
    sku_code,
    uom,
    bucket,
    batch,
    price,
    inclusion_status,
    locked_by_task_id,
    lock_mode,
    -- Calculate cumulative from beginning of time up to snapshot time
    sum(hourly_qty_change) as cumulative_qty,
    sum(event_count) as total_event_count,
    argMax(latest_hu_event_id, hour_window) as latest_hu_event_id,
    argMax(latest_quant_event_id, hour_window) as latest_quant_event_id,
    max(last_event_time) as last_event_time,
    -- All other fields using argMax to get latest values
    argMax(hu_event_seq, hour_window) as hu_event_seq,
    argMax(hu_id, hour_window) as hu_id,
    argMax(hu_event_type, hour_window) as hu_event_type,
    argMax(hu_event_payload, hour_window) as hu_event_payload,
    argMax(hu_event_attrs, hour_window) as hu_event_attrs,
    argMax(session_id, hour_window) as session_id,
    argMax(task_id, hour_window) as task_id,
    argMax(correlation_id, hour_window) as correlation_id,
    argMax(storage_id, hour_window) as storage_id,
    argMax(outer_hu_id, hour_window) as outer_hu_id,
    argMax(effective_storage_id, hour_window) as effective_storage_id,
    argMax(sku_id, hour_window) as sku_id,
    argMax(hu_kind_id, hour_window) as hu_kind_id,
    argMax(hu_state, hour_window) as hu_state,
    argMax(hu_attrs, hour_window) as hu_attrs,
    argMax(hu_created_at, hour_window) as hu_created_at,
    argMax(hu_updated_at, hour_window) as hu_updated_at,
    argMax(hu_lock_task_id, hour_window) as hu_lock_task_id,
    argMax(hu_effective_storage_id, hour_window) as hu_effective_storage_id,
    argMax(hu_kind_code, hour_window) as hu_kind_code,
    argMax(hu_kind_name, hour_window) as hu_kind_name,
    argMax(hu_kind_attrs, hour_window) as hu_kind_attrs,
    argMax(hu_kind_active, hour_window) as hu_kind_active,
    argMax(hu_kind_max_volume, hour_window) as hu_kind_max_volume,
    argMax(hu_kind_max_weight, hour_window) as hu_kind_max_weight,
    argMax(hu_kind_usage_type, hour_window) as hu_kind_usage_type,
    argMax(hu_kind_abbr, hour_window) as hu_kind_abbr,
    argMax(hu_kind_length, hour_window) as hu_kind_length,
    argMax(hu_kind_breadth, hour_window) as hu_kind_breadth,
    argMax(hu_kind_height, hour_window) as hu_kind_height,
    argMax(hu_kind_weight, hour_window) as hu_kind_weight,
    argMax(storage_bin_code, hour_window) as storage_bin_code,
    argMax(storage_bin_description, hour_window) as storage_bin_description,
    argMax(storage_bin_status, hour_window) as storage_bin_status,
    argMax(storage_bin_hu_id, hour_window) as storage_bin_hu_id,
    argMax(storage_multi_sku, hour_window) as storage_multi_sku,
    argMax(storage_multi_batch, hour_window) as storage_multi_batch,
    argMax(storage_picking_position, hour_window) as storage_picking_position,
    argMax(storage_putaway_position, hour_window) as storage_putaway_position,
    argMax(storage_rank, hour_window) as storage_rank,
    argMax(storage_aisle, hour_window) as storage_aisle,
    argMax(storage_bay, hour_window) as storage_bay,
    argMax(storage_level, hour_window) as storage_level,
    argMax(storage_position, hour_window) as storage_position,
    argMax(storage_depth, hour_window) as storage_depth,
    argMax(storage_max_sku_count, hour_window) as storage_max_sku_count,
    argMax(storage_max_sku_batch_count, hour_window) as storage_max_sku_batch_count,
    argMax(storage_bin_type_id, hour_window) as storage_bin_type_id,
    argMax(storage_bin_type_code, hour_window) as storage_bin_type_code,
    argMax(storage_bin_type_description, hour_window) as storage_bin_type_description,
    argMax(storage_max_volume_in_cc, hour_window) as storage_max_volume_in_cc,
    argMax(storage_max_weight_in_kg, hour_window) as storage_max_weight_in_kg,
    argMax(storage_pallet_capacity, hour_window) as storage_pallet_capacity,
    argMax(storage_hu_type, hour_window) as storage_hu_type,
    argMax(storage_auxiliary_bin, hour_window) as storage_auxiliary_bin,
    argMax(storage_hu_multi_sku, hour_window) as storage_hu_multi_sku,
    argMax(storage_hu_multi_batch, hour_window) as storage_hu_multi_batch,
    argMax(storage_use_derived_pallet_best_fit, hour_window) as storage_use_derived_pallet_best_fit,
    argMax(storage_only_full_pallet, hour_window) as storage_only_full_pallet,
    argMax(storage_bin_type_active, hour_window) as storage_bin_type_active,
    argMax(storage_zone_id, hour_window) as storage_zone_id,
    argMax(storage_zone_code, hour_window) as storage_zone_code,
    argMax(storage_zone_description, hour_window) as storage_zone_description,
    argMax(storage_zone_face, hour_window) as storage_zone_face,
    argMax(storage_peripheral, hour_window) as storage_peripheral,
    argMax(storage_surveillance_config, hour_window) as storage_surveillance_config,
    argMax(storage_zone_active, hour_window) as storage_zone_active,
    argMax(storage_area_id, hour_window) as storage_area_id,
    argMax(storage_area_code, hour_window) as storage_area_code,
    argMax(storage_area_description, hour_window) as storage_area_description,
    argMax(storage_area_type, hour_window) as storage_area_type,
    argMax(storage_rolling_days, hour_window) as storage_rolling_days,
    argMax(storage_area_active, hour_window) as storage_area_active,
    argMax(storage_x1, hour_window) as storage_x1,
    argMax(storage_x2, hour_window) as storage_x2,
    argMax(storage_y1, hour_window) as storage_y1,
    argMax(storage_y2, hour_window) as storage_y2,
    argMax(storage_position_active, hour_window) as storage_position_active,
    argMax(storage_attrs, hour_window) as storage_attrs,
    argMax(storage_bin_mapping, hour_window) as storage_bin_mapping,
    argMax(storage_created_at, hour_window) as storage_created_at,
    argMax(storage_updated_at, hour_window) as storage_updated_at,
    argMax(sku_name, hour_window) as sku_name,
    argMax(sku_short_description, hour_window) as sku_short_description,
    argMax(sku_description, hour_window) as sku_description,
    argMax(sku_category, hour_window) as sku_category,
    argMax(sku_product, hour_window) as sku_product,
    argMax(sku_product_id, hour_window) as sku_product_id,
    argMax(sku_category_group, hour_window) as sku_category_group,
    argMax(sku_sub_brand, hour_window) as sku_sub_brand,
    argMax(sku_brand, hour_window) as sku_brand,
    argMax(sku_fulfillment_type, hour_window) as sku_fulfillment_type,
    argMax(sku_inventory_type, hour_window) as sku_inventory_type,
    argMax(sku_shelf_life, hour_window) as sku_shelf_life,
    argMax(sku_handling_unit_type, hour_window) as sku_handling_unit_type,
    argMax(sku_cases_per_layer, hour_window) as sku_cases_per_layer,
    argMax(sku_layers, hour_window) as sku_layers,
    argMax(sku_active_from, hour_window) as sku_active_from,
    argMax(sku_active_till, hour_window) as sku_active_till,
    argMax(sku_l0_units, hour_window) as sku_l0_units,
    argMax(sku_l0_name, hour_window) as sku_l0_name,
    argMax(sku_l0_weight, hour_window) as sku_l0_weight,
    argMax(sku_l0_volume, hour_window) as sku_l0_volume,
    argMax(sku_l0_length, hour_window) as sku_l0_length,
    argMax(sku_l0_width, hour_window) as sku_l0_width,
    argMax(sku_l0_height, hour_window) as sku_l0_height,
    argMax(sku_l1_units, hour_window) as sku_l1_units,
    argMax(sku_l1_name, hour_window) as sku_l1_name,
    argMax(sku_l1_weight, hour_window) as sku_l1_weight,
    argMax(sku_l1_volume, hour_window) as sku_l1_volume,
    argMax(sku_l1_length, hour_window) as sku_l1_length,
    argMax(sku_l1_width, hour_window) as sku_l1_width,
    argMax(sku_l1_height, hour_window) as sku_l1_height,
    argMax(sku_active, hour_window) as sku_active,
    argMax(sku_created_at, hour_window) as sku_created_at,
    argMax(sku_updated_at, hour_window) as sku_updated_at,
    argMax(effective_storage_bin_code, hour_window) as effective_storage_bin_code,
    argMax(effective_storage_bin_description, hour_window) as effective_storage_bin_description,
    argMax(effective_storage_bin_status, hour_window) as effective_storage_bin_status,
    argMax(effective_storage_bin_hu_id, hour_window) as effective_storage_bin_hu_id,
    argMax(effective_storage_multi_sku, hour_window) as effective_storage_multi_sku,
    argMax(effective_storage_multi_batch, hour_window) as effective_storage_multi_batch,
    argMax(effective_storage_picking_position, hour_window) as effective_storage_picking_position,
    argMax(effective_storage_putaway_position, hour_window) as effective_storage_putaway_position,
    argMax(effective_storage_rank, hour_window) as effective_storage_rank,
    argMax(effective_storage_aisle, hour_window) as effective_storage_aisle,
    argMax(effective_storage_bay, hour_window) as effective_storage_bay,
    argMax(effective_storage_level, hour_window) as effective_storage_level,
    argMax(effective_storage_position, hour_window) as effective_storage_position,
    argMax(effective_storage_depth, hour_window) as effective_storage_depth,
    argMax(effective_storage_max_sku_count, hour_window) as effective_storage_max_sku_count,
    argMax(effective_storage_max_sku_batch_count, hour_window) as effective_storage_max_sku_batch_count,
    argMax(effective_storage_bin_type_id, hour_window) as effective_storage_bin_type_id,
    argMax(effective_storage_bin_type_code, hour_window) as effective_storage_bin_type_code,
    argMax(effective_storage_bin_type_description, hour_window) as effective_storage_bin_type_description,
    argMax(effective_storage_max_volume_in_cc, hour_window) as effective_storage_max_volume_in_cc,
    argMax(effective_storage_max_weight_in_kg, hour_window) as effective_storage_max_weight_in_kg,
    argMax(effective_storage_pallet_capacity, hour_window) as effective_storage_pallet_capacity,
    argMax(effective_storage_hu_type, hour_window) as effective_storage_hu_type,
    argMax(effective_storage_auxiliary_bin, hour_window) as effective_storage_auxiliary_bin,
    argMax(effective_storage_hu_multi_sku, hour_window) as effective_storage_hu_multi_sku,
    argMax(effective_storage_hu_multi_batch, hour_window) as effective_storage_hu_multi_batch,
    argMax(effective_storage_use_derived_pallet_best_fit, hour_window) as effective_storage_use_derived_pallet_best_fit,
    argMax(effective_storage_only_full_pallet, hour_window) as effective_storage_only_full_pallet,
    argMax(effective_storage_bin_type_active, hour_window) as effective_storage_bin_type_active,
    argMax(effective_storage_zone_id, hour_window) as effective_storage_zone_id,
    argMax(effective_storage_zone_code, hour_window) as effective_storage_zone_code,
    argMax(effective_storage_zone_description, hour_window) as effective_storage_zone_description,
    argMax(effective_storage_zone_face, hour_window) as effective_storage_zone_face,
    argMax(effective_storage_peripheral, hour_window) as effective_storage_peripheral,
    argMax(effective_storage_surveillance_config, hour_window) as effective_storage_surveillance_config,
    argMax(effective_storage_zone_active, hour_window) as effective_storage_zone_active,
    argMax(effective_storage_area_id, hour_window) as effective_storage_area_id,
    argMax(effective_storage_area_code, hour_window) as effective_storage_area_code,
    argMax(effective_storage_area_description, hour_window) as effective_storage_area_description,
    argMax(effective_storage_area_type, hour_window) as effective_storage_area_type,
    argMax(effective_storage_rolling_days, hour_window) as effective_storage_rolling_days,
    argMax(effective_storage_area_active, hour_window) as effective_storage_area_active,
    argMax(effective_storage_x1, hour_window) as effective_storage_x1,
    argMax(effective_storage_x2, hour_window) as effective_storage_x2,
    argMax(effective_storage_y1, hour_window) as effective_storage_y1,
    argMax(effective_storage_y2, hour_window) as effective_storage_y2,
    argMax(effective_storage_position_active, hour_window) as effective_storage_position_active,
    argMax(effective_storage_attrs, hour_window) as effective_storage_attrs,
    argMax(effective_storage_bin_mapping, hour_window) as effective_storage_bin_mapping,
    argMax(effective_storage_created_at, hour_window) as effective_storage_created_at,
    argMax(effective_storage_updated_at, hour_window) as effective_storage_updated_at,
    argMax(outer_hu_code, hour_window) as outer_hu_code,
    argMax(outer_hu_kind_id, hour_window) as outer_hu_kind_id,
    argMax(outer_hu_session_id, hour_window) as outer_hu_session_id,
    argMax(outer_hu_task_id, hour_window) as outer_hu_task_id,
    argMax(outer_hu_storage_id, hour_window) as outer_hu_storage_id,
    argMax(outer_hu_outer_hu_id, hour_window) as outer_hu_outer_hu_id,
    argMax(outer_hu_state, hour_window) as outer_hu_state,
    argMax(outer_hu_attrs, hour_window) as outer_hu_attrs,
    argMax(outer_hu_created_at, hour_window) as outer_hu_created_at,
    argMax(outer_hu_updated_at, hour_window) as outer_hu_updated_at,
    argMax(outer_hu_lock_task_id, hour_window) as outer_hu_lock_task_id,
    argMax(outer_hu_effective_storage_id, hour_window) as outer_hu_effective_storage_id,
    argMax(outer_hu_kind_code, hour_window) as outer_hu_kind_code,
    argMax(outer_hu_kind_name, hour_window) as outer_hu_kind_name,
    argMax(outer_hu_kind_attrs, hour_window) as outer_hu_kind_attrs,
    argMax(outer_hu_kind_active, hour_window) as outer_hu_kind_active,
    argMax(outer_hu_kind_max_volume, hour_window) as outer_hu_kind_max_volume,
    argMax(outer_hu_kind_max_weight, hour_window) as outer_hu_kind_max_weight,
    argMax(outer_hu_kind_usage_type, hour_window) as outer_hu_kind_usage_type,
    argMax(outer_hu_kind_abbr, hour_window) as outer_hu_kind_abbr,
    argMax(outer_hu_kind_length, hour_window) as outer_hu_kind_length,
    argMax(outer_hu_kind_breadth, hour_window) as outer_hu_kind_breadth,
    argMax(outer_hu_kind_height, hour_window) as outer_hu_kind_height,
    argMax(outer_hu_kind_weight, hour_window) as outer_hu_kind_weight,
    now() as _snapshot_generated_at,
    now64(3) as _processed_at
FROM wms_inventory_hourly_position
CROSS JOIN current_week
WHERE hour_window < current_week.snapshot_timestamp
GROUP BY wh_id, hu_code, sku_code, uom, bucket, batch, price, inclusion_status, locked_by_task_id, lock_mode
HAVING cumulative_qty != 0;

-- How to use this view for weekly snapshot generation:

-- 1. Manual execution (run every Sunday):
-- INSERT INTO wms_inventory_weekly_snapshot 
-- SELECT * FROM wms_inventory_weekly_snapshot_auto;

-- 2. Set up a cron job to run weekly:
-- 0 0 * * 0 clickhouse-client --query="INSERT INTO wms_inventory_weekly_snapshot SELECT * FROM wms_inventory_weekly_snapshot_auto"

-- 3. Or use an orchestration tool like Airflow to schedule the INSERT

-- Check the latest snapshot in the table:
SELECT 
    'Latest Weekly Snapshot' as info,
    max(snapshot_timestamp) as latest_snapshot,
    count() as total_snapshots,
    sum(rows) as total_rows
FROM system.parts
WHERE database = currentDatabase()
  AND table = 'wms_inventory_weekly_snapshot'
  AND active;

-- Verify snapshot generation worked:
SELECT 
    snapshot_timestamp,
    count() as positions,
    sum(cumulative_qty) as total_quantity,
    uniq(wh_id) as warehouses,
    uniq(sku_code) as unique_skus
FROM wms_inventory_weekly_snapshot
GROUP BY snapshot_timestamp
ORDER BY snapshot_timestamp DESC
LIMIT 10;